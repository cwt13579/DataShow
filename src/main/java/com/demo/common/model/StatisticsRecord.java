package com.demo.common.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.demo.common.model.base.BaseStatisticsRecord;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class StatisticsRecord extends BaseStatisticsRecord<StatisticsRecord> {
	public static final StatisticsRecord dao = new StatisticsRecord().dao();
	
	 public Page<StatisticsRecord> getAllStatisticsRecord(int current, int pageSize, Map<String, String> map) {
		    List<Object> paramList = new ArrayList<Object>();
		    StringBuilder condition = new StringBuilder();
		    String name = map.get("user_name");

		    String from = "FROM  statistics_record a where 1=1 ";
		    condition.append(from);

		    if (!StringUtils.isBlank(name)) {
		      condition.append(" and a.user_name like ?");
		      paramList.add("%" + name + "%");
		    }
 
		    condition.append(" order by a.date desc");
		    Page<StatisticsRecord> page =
		        paginate(current, pageSize, "SELECT * ", condition.toString(),
		            paramList.toArray(new Object[] {}));

		    if (page != null && page.getList() != null) {
		      if (current > 1 && page.getList().isEmpty()) {
		        page = getAllStatisticsRecord(current - 1, pageSize, map);
		      }
		    }
		    return page;
		  }
	 
	 public StatisticsRecord getMaxPersonRecommendCount() {
		 return findFirst("SELECT MAX(temp.recommend_count)recommend_count FROM (SELECT SUM(a.recommend_count) recommend_count,a.user_account   FROM statistics_record a GROUP BY a.user_account) temp ");
	 }
	 public StatisticsRecord getMaxPersonRecommendCountByOrg() {
		 return findFirst("SELECT MAX(temp.COUNT) recommend_count FROM (SELECT a.org_code, SUM(a.recommend_count) COUNT  FROM statistics_record a group BY a.org_code) temp ");
	 }
	 public List<StatisticsRecord> getStatisticsRecordList(BigDecimal k1,BigDecimal k2,Integer maxRecommedCount) {
		 Calendar cal = Calendar.getInstance();
		 cal.setTime(new Date());
		 int month = cal.get(Calendar.MONTH)+1;
		 int year = cal.get(Calendar.YEAR);
		 String monthFirstDay = year+"-"+month+"-"+"01";
		 String monthLastDay = year+"-"+month+"-"+"31";
		 String sql = "SELECT * FROM ("
		 		+ " SELECT a.user_account,a.user_name,a.org_name,SUM(a.recommend_count) recommend_count,SUM(a.apply_count) apply_count,SUM(a.apply_count)/SUM(a.recommend_count) transfer_rate,"
		 		+ " ((SUM(a.recommend_count)/?)*?+(SUM(a.apply_count)/SUM(a.recommend_count))*?)*100 score "
		 		+ " from statistics_record a "
		 		+ " where a.date BETWEEN ? AND ? GROUP BY a.user_account,a.user_name,a.org_code,a.org_name) temp "
		 		+ " order BY temp.score DESC,temp.recommend_count DESC "
		 		+ " limit 0,20";
		 return find(sql,new Object[]{maxRecommedCount,k1,k2,monthFirstDay,monthLastDay});
	 }
	 
	 public List<StatisticsRecord> getStatisticsRecordListByOrg(String orgName) {
		 Calendar cal = Calendar.getInstance();
		 cal.setTime(new Date());
		 int month = cal.get(Calendar.MONTH)+1;
		 int year = cal.get(Calendar.YEAR);
		 String monthFirstDay = year+"-"+month+"-"+"01";
		 String monthLastDay = year+"-"+month+"-"+"31";
		 String sql = "SELECT * FROM ("
		 		+ " SELECT a.user_account,a.user_name,a.org_name,SUM(a.recommend_count) recommend_count,SUM(a.apply_count) apply_count,SUM(a.apply_count)/SUM(a.recommend_count) transfer_rate,"
		 		+ " from statistics_record a "
		 		+ " where a.date BETWEEN ? AND ? "
		 		+ " and a.org_name=? "
		 		+ "GROUP BY a.user_account,a.user_name,a.org_code,a.org_name"
		 		+ ") temp "
		 		+ " order BY temp.recommend_count DESC ,temp.transfer_rate DESC "
		 		+ " limit 0,5";
		 return find(sql,new Object[]{monthFirstDay,monthLastDay,orgName});
	 }
	 
	 public List<StatisticsRecord> getOrgStatisticsRecordList(Integer standardRecommendedCount,BigDecimal k3,BigDecimal k4) {
		 Calendar cal = Calendar.getInstance();
		 cal.setTime(new Date());
		 int month = cal.get(Calendar.MONTH)+1;
		 int year = cal.get(Calendar.YEAR);
		 String monthFirstDay = year+"-"+month+"-"+"01";
		 String monthLastDay = year+"-"+month+"-"+"31";
		 String sql = "SELECT * FROM ("
		 		+ " SELECT a.org_code,a.org_name,SUM(a.recommend_count) recommend_count,SUM(a.apply_count) apply_count,SUM(a.apply_count)/SUM(a.recommend_count) transfer_rate,COUNT(a.user_account) userCount,b.remark,COUNT(a.user_account)/b.remark use_rate,b.ext1/b.remark open_rate, "
		 		+ "((SUM(a.recommend_count)/?)*?+(SUM(a.apply_count)/SUM(a.recommend_count))*?+(COUNT(a.user_account)/b.remark)*?)*100 score "
		 		+ " FROM statistics_record a ,sys_dict b "
		 		+ " WHERE   a.org_code=b.data_value "
		 		+ " AND b.data_type='Org' "
		 		+ " AND a.date BETWEEN ? AND ? "
		 		+ " GROUP BY a.org_code,a.org_name ) temp  "
		 		+ " ORDER BY temp.score DESC,temp.recommend_count DESC ";
		 return find(sql,new Object[]{standardRecommendedCount,k3,k4,k3,monthFirstDay,monthLastDay});
	 }
}
