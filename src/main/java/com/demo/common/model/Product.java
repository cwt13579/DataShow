package com.demo.common.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.demo.common.model.base.BaseProduct;
import com.jfinal.plugin.activerecord.Page;

/**
 * Generated by cwt
 */
@SuppressWarnings("serial")
public class Product extends BaseProduct<Product> {
  public static final Product dao = new Product().dao();

  public Page<Product> getAllProduct(int current, int pageSize, Map<String, String> map) {
    List<Object> paramList = new ArrayList<Object>();
    StringBuilder condition = new StringBuilder();
    String name = map.get("product_name");

    String from = "FROM  product a where 1=1 ";
    condition.append(from);

    if (!StringUtils.isBlank(name)) {
      condition.append(" and a.product_name like ?");
      paramList.add("%" + name + "%");
    }

    Page<Product> page =
        paginate(current, pageSize, "SELECT * ", condition.toString(),
            paramList.toArray(new Object[] {}));

    if (page != null && page.getList() != null) {
      if (current > 1 && page.getList().isEmpty()) {
        page = getAllProduct(current - 1, pageSize, map);
      }
    }
    return page;
  }

  public List<Product> getProductBy(Map<String, String[]> map) {
    List<Object> paramList = new ArrayList<Object>();
    StringBuilder condition = new StringBuilder();
    String from = "select DISTINCT a.* FROM  product a inner join product_rule b on a.product_code=b.product_code inner join product_region c on a.id=c.product_id where 1=1 ";
    if (!StringUtils.isAllBlank(map.get("loan_amount")) ) {
      condition.append(" and b.loan_amount <= ?");
      paramList.add(map.get("loan_amount")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_term")) ) {
      condition.append(" and b.loan_term <= ?");
      paramList.add(map.get("loan_term")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_workyears")) ) {
      condition.append(" and b.loan_workyears <= ?");
      paramList.add(map.get("loan_workyears")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_income")) ) {
      condition.append(" and b.loan_income <= ?");
      paramList.add(map.get("loan_income")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_house")) ) {
      condition.append(" and b.loan_house = ?");
      paramList.add(map.get("loan_house")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_car")) ) {
      condition.append(" and b.loan_car = ?");
      paramList.add(map.get("loan_car")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_work")) ) {
      condition.append(" and b.loan_work = ?");
      paramList.add(map.get("loan_work")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_age")) ) {
      condition.append(" and b.loan_age <= ?");
      paramList.add(map.get("loan_age")[0]);
    }
    if (!StringUtils.isAllBlank(map.get("loan_area")) ) {
      condition.append(" and b.loan_area = ?");
      paramList.add(map.get("loan_area")[0]);
    }
    return find(from + condition.toString(), paramList.toArray(new Object[] {}));
  }
}
